{
  "uid" : "1efc00df5398e9f6",
  "name" : "test_wrong_num",
  "fullName" : "test_case.Login_case.TestLogin#test_wrong_num",
  "historyId" : "e27ac62871ee8a5835b815a46696149b",
  "time" : {
    "start" : 1636970097157,
    "stop" : 1636970097409,
    "duration" : 252
  },
  "description" : "输入10位手机号",
  "descriptionHtml" : "<p>输入10位手机号</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9347C70>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"输入10位手机号\")\n    def test_wrong_num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"1880105363\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A93E78E0>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "输入10位手机号",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9347C70>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"输入10位手机号\")\n    def test_wrong_num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"1880105363\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A93E78E0>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5b3cfe94f0e62e86",
      "name" : "log",
      "source" : "5b3cfe94f0e62e86.txt",
      "type" : "text/plain",
      "size" : 327
    }, {
      "uid" : "bdcca6890d9f50a2",
      "name" : "stdout",
      "source" : "bdcca6890d9f50a2.txt",
      "type" : "text/plain",
      "size" : 85
    }, {
      "uid" : "c45a42c7a2194a8c",
      "name" : "stderr",
      "source" : "c45a42c7a2194a8c.txt",
      "type" : "text/plain",
      "size" : 465
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "参数填写不正确，登录失败"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "登录模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "Login_case"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "20580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.Login_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ {
      "uid" : "ffad44899930737e",
      "status" : "passed",
      "time" : {
        "start" : 1632474695241,
        "stop" : 1632474695438,
        "duration" : 197
      }
    }, {
      "uid" : "ebdfa58356ec5f7c",
      "status" : "passed",
      "time" : {
        "start" : 1632473705406,
        "stop" : 1632473705619,
        "duration" : 213
      }
    }, {
      "uid" : "bf96a7e26300476f",
      "status" : "passed",
      "time" : {
        "start" : 1632473544001,
        "stop" : 1632473544210,
        "duration" : 209
      }
    }, {
      "uid" : "9d630a48f6b9e9d9",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1632469964077,
        "stop" : 1632469964272,
        "duration" : 195
      }
    }, {
      "uid" : "e6096721c267f768",
      "status" : "passed",
      "time" : {
        "start" : 1632469738994,
        "stop" : 1632469739209,
        "duration" : 215
      }
    }, {
      "uid" : "448562dae31196be",
      "status" : "passed",
      "time" : {
        "start" : 1632469658665,
        "stop" : 1632469658856,
        "duration" : 191
      }
    }, {
      "uid" : "9a8080325adeb161",
      "status" : "passed",
      "time" : {
        "start" : 1632469574039,
        "stop" : 1632469574227,
        "duration" : 188
      }
    }, {
      "uid" : "7742f8f9ce11d23a",
      "status" : "passed",
      "time" : {
        "start" : 1632469454776,
        "stop" : 1632469455022,
        "duration" : 246
      }
    }, {
      "uid" : "e1cf38f238bab13e",
      "status" : "passed",
      "time" : {
        "start" : 1632469377284,
        "stop" : 1632469377490,
        "duration" : 206
      }
    }, {
      "uid" : "f81eec666cd51d93",
      "status" : "passed",
      "time" : {
        "start" : 1632468359944,
        "stop" : 1632468360169,
        "duration" : 225
      }
    }, {
      "uid" : "dc3ff7c9c0fe81d9",
      "status" : "passed",
      "time" : {
        "start" : 1632455637898,
        "stop" : 1632455638117,
        "duration" : 219
      }
    }, {
      "uid" : "b33a6842bc070ae7",
      "status" : "passed",
      "time" : {
        "start" : 1632454819445,
        "stop" : 1632454819679,
        "duration" : 234
      }
    }, {
      "uid" : "55c2b6b79338710a",
      "status" : "passed",
      "time" : {
        "start" : 1632453997741,
        "stop" : 1632453997956,
        "duration" : 215
      }
    }, {
      "uid" : "43443ec17b0a6ad7",
      "status" : "passed",
      "time" : {
        "start" : 1632453126675,
        "stop" : 1632453126871,
        "duration" : 196
      }
    }, {
      "uid" : "7937997f5f013db9",
      "status" : "passed",
      "time" : {
        "start" : 1632453016386,
        "stop" : 1632453016577,
        "duration" : 191
      }
    }, {
      "uid" : "d16ec23ea98680b5",
      "status" : "passed",
      "time" : {
        "start" : 1632387035145,
        "stop" : 1632387035329,
        "duration" : 184
      }
    }, {
      "uid" : "5ca83cf6b1fe4359",
      "status" : "passed",
      "time" : {
        "start" : 1631518363974,
        "stop" : 1631518364166,
        "duration" : 192
      }
    }, {
      "uid" : "fb267b72bb25435e",
      "status" : "passed",
      "time" : {
        "start" : 1631518042188,
        "stop" : 1631518042341,
        "duration" : 153
      }
    }, {
      "uid" : "b7c0203f233aac18",
      "status" : "passed",
      "time" : {
        "start" : 1631503269128,
        "stop" : 1631503269258,
        "duration" : 130
      }
    }, {
      "uid" : "8a8d2affa9aafaa5",
      "status" : "passed",
      "time" : {
        "start" : 1631502914883,
        "stop" : 1631502914998,
        "duration" : 115
      }
    }, {
      "uid" : "6935c609c04f35e8",
      "status" : "passed",
      "time" : {
        "start" : 1631502409650,
        "stop" : 1631502409762,
        "duration" : 112
      }
    }, {
      "uid" : "8882adcec58f3515",
      "status" : "passed",
      "time" : {
        "start" : 1631069452346,
        "stop" : 1631069453496,
        "duration" : 1150
      }
    }, {
      "uid" : "928a2621d9ca4801",
      "status" : "passed",
      "time" : {
        "start" : 1631069406820,
        "stop" : 1631069406912,
        "duration" : 92
      }
    }, {
      "uid" : "457f0d2d7f6186ce",
      "status" : "passed",
      "time" : {
        "start" : 1629283726326,
        "stop" : 1629283726435,
        "duration" : 109
      }
    }, {
      "uid" : "edfb74400dd7bcbf",
      "status" : "passed",
      "time" : {
        "start" : 1629186775350,
        "stop" : 1629186775462,
        "duration" : 112
      }
    }, {
      "uid" : "ac4edd9055ebdcab",
      "status" : "passed",
      "time" : {
        "start" : 1629186621805,
        "stop" : 1629186621932,
        "duration" : 127
      }
    }, {
      "uid" : "8b020e3c8b31f817",
      "status" : "passed",
      "time" : {
        "start" : 1629185611250,
        "stop" : 1629185611397,
        "duration" : 147
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1efc00df5398e9f6.json",
  "parameterValues" : [ ]
}