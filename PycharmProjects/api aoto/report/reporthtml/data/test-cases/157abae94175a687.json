{
  "uid" : "157abae94175a687",
  "name" : "test_Registered_Num",
  "fullName" : "test_case.Register_case.TestRegister#test_Registered_Num",
  "historyId" : "7e036e58580f332cbdce31d56c1ba254",
  "time" : {
    "start" : 1636970094904,
    "stop" : 1636970095076,
    "duration" : 172
  },
  "description" : "已经注册过的手机号",
  "descriptionHtml" : "<p>已经注册过的手机号</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.Register_case.TestRegister object at 0x00000286A937E7F0>\n\n    @allure.story(\"参数填写不正确，注册失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"已经注册过的手机号\")\n    def test_Registered_Num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        base_url = config.adss.server_ip()\n        url = base_url + 'register'\n        data = {\n            \"password\": \"123456Aa\",\n            \"phone\": \"18801053303\",\n            \"v_code\": \"666666\"\n        }\n        token = AutoDL_auth.change_ticket()\n        # 请求头 授权\n        headers = {\"Authorization\": token}\n        r = RequestsHandler().post_Req(url=url, data=data, headers=headers)\n        code1 = r.status_code\n        str_response = r.content.decode()\n        json_response = dict_style(str_response)\n        test_assert.assert_code(code1, 200)\n>       test_assert.assert_body(json_response, 'msg', '手机号已注册，请登录')\n\n..\\test_case\\Register_case.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A937E160>\nbody = {'code': 'AlreadyExist', 'data': None, 'debug_error': '', 'msg': '手机号已注册'}\nbody_msg = 'msg', expected_msg = '手机号已注册，请登录'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "已经注册过的手机号",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.Register_case.TestRegister object at 0x00000286A937E7F0>\n\n    @allure.story(\"参数填写不正确，注册失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"已经注册过的手机号\")\n    def test_Registered_Num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        base_url = config.adss.server_ip()\n        url = base_url + 'register'\n        data = {\n            \"password\": \"123456Aa\",\n            \"phone\": \"18801053303\",\n            \"v_code\": \"666666\"\n        }\n        token = AutoDL_auth.change_ticket()\n        # 请求头 授权\n        headers = {\"Authorization\": token}\n        r = RequestsHandler().post_Req(url=url, data=data, headers=headers)\n        code1 = r.status_code\n        str_response = r.content.decode()\n        json_response = dict_style(str_response)\n        test_assert.assert_code(code1, 200)\n>       test_assert.assert_body(json_response, 'msg', '手机号已注册，请登录')\n\n..\\test_case\\Register_case.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A937E160>\nbody = {'code': 'AlreadyExist', 'data': None, 'debug_error': '', 'msg': '手机号已注册'}\nbody_msg = 'msg', expected_msg = '手机号已注册，请登录'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8baf968caa36d358",
      "name" : "log",
      "source" : "8baf968caa36d358.txt",
      "type" : "text/plain",
      "size" : 342
    }, {
      "uid" : "2f9c6908ae201098",
      "name" : "stdout",
      "source" : "2f9c6908ae201098.txt",
      "type" : "text/plain",
      "size" : 273
    }, {
      "uid" : "d20abe26947489b5",
      "name" : "stderr",
      "source" : "d20abe26947489b5.txt",
      "type" : "text/plain",
      "size" : 480
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "参数填写不正确，注册失败"
  }, {
    "name" : "feature",
    "value" : "注册模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "Register_case"
  }, {
    "name" : "subSuite",
    "value" : "TestRegister"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "20580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.Register_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ {
      "uid" : "5b6df20dfb91c852",
      "status" : "passed",
      "time" : {
        "start" : 1632474692393,
        "stop" : 1632474692709,
        "duration" : 316
      }
    }, {
      "uid" : "c4b821736b3d0b88",
      "status" : "passed",
      "time" : {
        "start" : 1632473702571,
        "stop" : 1632473702916,
        "duration" : 345
      }
    }, {
      "uid" : "37bfae806bd033c1",
      "status" : "passed",
      "time" : {
        "start" : 1632473540949,
        "stop" : 1632473541277,
        "duration" : 328
      }
    }, {
      "uid" : "a6ed63876b66c118",
      "status" : "passed",
      "time" : {
        "start" : 1632469961118,
        "stop" : 1632469961426,
        "duration" : 308
      }
    }, {
      "uid" : "e15a28ac3a390da2",
      "status" : "passed",
      "time" : {
        "start" : 1632469736206,
        "stop" : 1632469736524,
        "duration" : 318
      }
    }, {
      "uid" : "5f1240ca0e652fb3",
      "status" : "passed",
      "time" : {
        "start" : 1632469655731,
        "stop" : 1632469656067,
        "duration" : 336
      }
    }, {
      "uid" : "b2b62cfdfb9fa497",
      "status" : "passed",
      "time" : {
        "start" : 1632469571131,
        "stop" : 1632469571557,
        "duration" : 426
      }
    }, {
      "uid" : "7d7ec3df5b436e7f",
      "status" : "passed",
      "time" : {
        "start" : 1632469451566,
        "stop" : 1632469451903,
        "duration" : 337
      }
    }, {
      "uid" : "da9c3c3cd006203c",
      "status" : "passed",
      "time" : {
        "start" : 1632469374295,
        "stop" : 1632469374657,
        "duration" : 362
      }
    }, {
      "uid" : "101e8f748cc095ea",
      "status" : "passed",
      "time" : {
        "start" : 1632468357090,
        "stop" : 1632468357410,
        "duration" : 320
      }
    }, {
      "uid" : "3764eee157ba72a5",
      "status" : "passed",
      "time" : {
        "start" : 1632455634625,
        "stop" : 1632455635002,
        "duration" : 377
      }
    }, {
      "uid" : "55a541943d76c9d9",
      "status" : "passed",
      "time" : {
        "start" : 1632454816252,
        "stop" : 1632454816607,
        "duration" : 355
      }
    }, {
      "uid" : "2e38512322a9920f",
      "status" : "passed",
      "time" : {
        "start" : 1632453994885,
        "stop" : 1632453995211,
        "duration" : 326
      }
    }, {
      "uid" : "dd1d6ccead9cf8e0",
      "status" : "broken",
      "statusDetails" : "TypeError: 'NoneType' object is not subscriptable",
      "time" : {
        "start" : 1632453124426,
        "stop" : 1632453124594,
        "duration" : 168
      }
    }, {
      "uid" : "1d27228401cd46c4",
      "status" : "passed",
      "time" : {
        "start" : 1632453013235,
        "stop" : 1632453013596,
        "duration" : 361
      }
    }, {
      "uid" : "6a6d6ca6de0c2505",
      "status" : "passed",
      "time" : {
        "start" : 1632387032031,
        "stop" : 1632387032348,
        "duration" : 317
      }
    }, {
      "uid" : "cfbcd921e0977ca0",
      "status" : "passed",
      "time" : {
        "start" : 1631518361057,
        "stop" : 1631518361407,
        "duration" : 350
      }
    }, {
      "uid" : "7cd8f2d2f3c8357c",
      "status" : "passed",
      "time" : {
        "start" : 1631518040541,
        "stop" : 1631518040726,
        "duration" : 185
      }
    }, {
      "uid" : "f2d3c0ec0d748ded",
      "status" : "passed",
      "time" : {
        "start" : 1631503267043,
        "stop" : 1631503267261,
        "duration" : 218
      }
    }, {
      "uid" : "e249f233e18d856d",
      "status" : "passed",
      "time" : {
        "start" : 1631502912896,
        "stop" : 1631502913084,
        "duration" : 188
      }
    }, {
      "uid" : "ef0b5e5d51567296",
      "status" : "passed",
      "time" : {
        "start" : 1631502407752,
        "stop" : 1631502407921,
        "duration" : 169
      }
    }, {
      "uid" : "cd3fa9a58bbc0140",
      "status" : "broken",
      "statusDetails" : "TypeError: 'NoneType' object is not subscriptable",
      "time" : {
        "start" : 1631069451038,
        "stop" : 1631069451151,
        "duration" : 113
      }
    }, {
      "uid" : "8f57da1c67987a02",
      "status" : "passed",
      "time" : {
        "start" : 1631069404975,
        "stop" : 1631069405149,
        "duration" : 174
      }
    }, {
      "uid" : "fd4197a51a92e696",
      "status" : "passed",
      "time" : {
        "start" : 1629283724442,
        "stop" : 1629283724622,
        "duration" : 180
      }
    }, {
      "uid" : "93af9923053fd070",
      "status" : "broken",
      "statusDetails" : "TypeError: 'NoneType' object is not subscriptable",
      "time" : {
        "start" : 1629186774119,
        "stop" : 1629186774206,
        "duration" : 87
      }
    }, {
      "uid" : "d320f4930f6200c7",
      "status" : "passed",
      "time" : {
        "start" : 1629186620201,
        "stop" : 1629186620406,
        "duration" : 205
      }
    }, {
      "uid" : "d64e0f396a050adb",
      "status" : "passed",
      "time" : {
        "start" : 1629185609183,
        "stop" : 1629185609387,
        "duration" : 204
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "157abae94175a687.json",
  "parameterValues" : [ ]
}