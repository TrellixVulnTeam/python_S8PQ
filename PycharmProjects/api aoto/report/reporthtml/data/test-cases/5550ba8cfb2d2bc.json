{
  "uid" : "5550ba8cfb2d2bc",
  "name" : "test_Num_Illegal_Character",
  "fullName" : "test_case.Login_case.TestLogin#test_Num_Illegal_Character",
  "historyId" : "bc2db944251b700a8ef2a7f0d021e8fc",
  "time" : {
    "start" : 1636970096929,
    "stop" : 1636970097143,
    "duration" : 214
  },
  "description" : "账号有特殊字符",
  "descriptionHtml" : "<p>账号有特殊字符</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9C02FD0>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"账号有特殊字符\")\n    def test_Num_Illegal_Character(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"188888888$!\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A9C02940>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "账号有特殊字符",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9C02FD0>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"账号有特殊字符\")\n    def test_Num_Illegal_Character(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"188888888$!\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A9C02940>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b079f1e895a988eb",
      "name" : "log",
      "source" : "b079f1e895a988eb.txt",
      "type" : "text/plain",
      "size" : 363
    }, {
      "uid" : "efa771926181625",
      "name" : "stdout",
      "source" : "efa771926181625.txt",
      "type" : "text/plain",
      "size" : 85
    }, {
      "uid" : "b42f372ffb9fe0bc",
      "name" : "stderr",
      "source" : "b42f372ffb9fe0bc.txt",
      "type" : "text/plain",
      "size" : 501
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "参数填写不正确，登录失败"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "登录模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "Login_case"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "20580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.Login_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ {
      "uid" : "2704d11499b28f40",
      "status" : "passed",
      "time" : {
        "start" : 1632474695053,
        "stop" : 1632474695237,
        "duration" : 184
      }
    }, {
      "uid" : "ea85e6b893e4caed",
      "status" : "passed",
      "time" : {
        "start" : 1632473705215,
        "stop" : 1632473705402,
        "duration" : 187
      }
    }, {
      "uid" : "3665b22edbf75cb0",
      "status" : "passed",
      "time" : {
        "start" : 1632473543769,
        "stop" : 1632473543996,
        "duration" : 227
      }
    }, {
      "uid" : "9020b5f96361d53b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1632469963654,
        "stop" : 1632469963852,
        "duration" : 198
      }
    }, {
      "uid" : "f83449eca1237f31",
      "status" : "passed",
      "time" : {
        "start" : 1632469738789,
        "stop" : 1632469738990,
        "duration" : 201
      }
    }, {
      "uid" : "42d5f2b534fce3af",
      "status" : "passed",
      "time" : {
        "start" : 1632469658481,
        "stop" : 1632469658660,
        "duration" : 179
      }
    }, {
      "uid" : "d6b10bc86cb551ad",
      "status" : "passed",
      "time" : {
        "start" : 1632469573850,
        "stop" : 1632469574036,
        "duration" : 186
      }
    }, {
      "uid" : "981c38877f78c235",
      "status" : "passed",
      "time" : {
        "start" : 1632469454585,
        "stop" : 1632469454773,
        "duration" : 188
      }
    }, {
      "uid" : "39b351f21b126bf",
      "status" : "passed",
      "time" : {
        "start" : 1632469377083,
        "stop" : 1632469377281,
        "duration" : 198
      }
    }, {
      "uid" : "e7334f7fd43ddb7e",
      "status" : "passed",
      "time" : {
        "start" : 1632468359730,
        "stop" : 1632468359941,
        "duration" : 211
      }
    }, {
      "uid" : "594e944079e0be04",
      "status" : "passed",
      "time" : {
        "start" : 1632455637668,
        "stop" : 1632455637894,
        "duration" : 226
      }
    }, {
      "uid" : "ea290270fdf5b525",
      "status" : "passed",
      "time" : {
        "start" : 1632454819219,
        "stop" : 1632454819440,
        "duration" : 221
      }
    }, {
      "uid" : "1c13b0a41328e432",
      "status" : "passed",
      "time" : {
        "start" : 1632453997557,
        "stop" : 1632453997734,
        "duration" : 177
      }
    }, {
      "uid" : "b5857d0f6f7ed39d",
      "status" : "passed",
      "time" : {
        "start" : 1632453126418,
        "stop" : 1632453126663,
        "duration" : 245
      }
    }, {
      "uid" : "4d52ee1dd31a0079",
      "status" : "passed",
      "time" : {
        "start" : 1632453016185,
        "stop" : 1632453016381,
        "duration" : 196
      }
    }, {
      "uid" : "beb826a965f7637b",
      "status" : "passed",
      "time" : {
        "start" : 1632387034955,
        "stop" : 1632387035142,
        "duration" : 187
      }
    }, {
      "uid" : "c5e177e984fe6cdd",
      "status" : "passed",
      "time" : {
        "start" : 1631518363790,
        "stop" : 1631518363961,
        "duration" : 171
      }
    }, {
      "uid" : "9a06c714263b1fa9",
      "status" : "passed",
      "time" : {
        "start" : 1631518042065,
        "stop" : 1631518042185,
        "duration" : 120
      }
    }, {
      "uid" : "15d2584c7b654c33",
      "status" : "passed",
      "time" : {
        "start" : 1631503268987,
        "stop" : 1631503269125,
        "duration" : 138
      }
    }, {
      "uid" : "48bb162fb830ee4c",
      "status" : "passed",
      "time" : {
        "start" : 1631502914769,
        "stop" : 1631502914879,
        "duration" : 110
      }
    }, {
      "uid" : "d0120c747d532d43",
      "status" : "passed",
      "time" : {
        "start" : 1631502409522,
        "stop" : 1631502409646,
        "duration" : 124
      }
    }, {
      "uid" : "aec6c24dc30a274",
      "status" : "passed",
      "time" : {
        "start" : 1631069452222,
        "stop" : 1631069452342,
        "duration" : 120
      }
    }, {
      "uid" : "74153432de1ba5ca",
      "status" : "passed",
      "time" : {
        "start" : 1631069406710,
        "stop" : 1631069406817,
        "duration" : 107
      }
    }, {
      "uid" : "75c8f5aa9ee38013",
      "status" : "passed",
      "time" : {
        "start" : 1629283726201,
        "stop" : 1629283726323,
        "duration" : 122
      }
    }, {
      "uid" : "ff4309418cb2a9d8",
      "status" : "passed",
      "time" : {
        "start" : 1629186775242,
        "stop" : 1629186775347,
        "duration" : 105
      }
    }, {
      "uid" : "c9f3d5bfcd7fa0d5",
      "status" : "passed",
      "time" : {
        "start" : 1629186621684,
        "stop" : 1629186621802,
        "duration" : 118
      }
    }, {
      "uid" : "4062c69fd4328f0b",
      "status" : "passed",
      "time" : {
        "start" : 1629185611101,
        "stop" : 1629185611246,
        "duration" : 145
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "5550ba8cfb2d2bc.json",
  "parameterValues" : [ ]
}