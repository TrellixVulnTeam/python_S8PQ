{
  "uid" : "eeb81e01b2d2055",
  "name" : "充值少于1元",
  "fullName" : "testCases.test_RechargeCase.TestRecharge#test_wx_register",
  "historyId" : "55c0ab11d3efac80b1d04e7f3c3c18e7",
  "time" : {
    "start" : 1657094323624,
    "stop" : 1657094327595,
    "duration" : 3971
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'Success' == 'BadRequest'\n  - BadRequest\n  + Success",
  "statusTrace" : "self = <testCases.test_RechargeCase.TestRecharge object at 0x000001B47CDD3A30>\ntitle = '充值少于1元', inBody = {'asset': 100}\nexpData = {'code': 'BadRequest', 'msg': '充值金额最低1元'}\n\n    @pytest.mark.parametrize('title,inBody,expData', get_yamlCase_data(data_path + '\\\\WxRechargeCase.yaml'))\n    @allure.story('微信充值接口')\n    @allure.title(\"{title}\")\n    def test_wx_register(self, title, inBody, expData):\n        resData = Recharge().wx_recharge(inData=inBody)\n>       self.define_assert(resData, expData)\n\n..\\testCases\\test_RechargeCase.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\Assert.py:111: in define_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCases.test_RechargeCase.TestRecharge'>\nres = {'code': 'Success', 'data': {'asset': 100, 'code_url': 'weixin://wxpay/bizpayurl?pr=ABJuWktzz', 'recharge_uuid': '956336276175657667'}, 'msg': ''}\nrespData = {'code': 'BadRequest', 'msg': '充值金额最低1元'}\n\n    @classmethod  # 使用类名就可以直接调用类方法\n    def define_assert(cls, res, respData):\n        try:\n            if 'code' in respData:\n>               assert res['code'] == respData['code']\nE               AssertionError: assert 'Success' == 'BadRequest'\nE                 - BadRequest\nE                 + Success\n\n..\\common\\Assert.py:104: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "start_running",
    "time" : {
      "start" : 1657094299655,
      "stop" : 1657094299655,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'Success' == 'BadRequest'\n  - BadRequest\n  + Success",
    "statusTrace" : "self = <testCases.test_RechargeCase.TestRecharge object at 0x000001B47CDD3A30>\ntitle = '充值少于1元', inBody = {'asset': 100}\nexpData = {'code': 'BadRequest', 'msg': '充值金额最低1元'}\n\n    @pytest.mark.parametrize('title,inBody,expData', get_yamlCase_data(data_path + '\\\\WxRechargeCase.yaml'))\n    @allure.story('微信充值接口')\n    @allure.title(\"{title}\")\n    def test_wx_register(self, title, inBody, expData):\n        resData = Recharge().wx_recharge(inData=inBody)\n>       self.define_assert(resData, expData)\n\n..\\testCases\\test_RechargeCase.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\Assert.py:111: in define_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCases.test_RechargeCase.TestRecharge'>\nres = {'code': 'Success', 'data': {'asset': 100, 'code_url': 'weixin://wxpay/bizpayurl?pr=ABJuWktzz', 'recharge_uuid': '956336276175657667'}, 'msg': ''}\nrespData = {'code': 'BadRequest', 'msg': '充值金额最低1元'}\n\n    @classmethod  # 使用类名就可以直接调用类方法\n    def define_assert(cls, res, respData):\n        try:\n            if 'code' in respData:\n>               assert res['code'] == respData['code']\nE               AssertionError: assert 'Success' == 'BadRequest'\nE                 - BadRequest\nE                 + Success\n\n..\\common\\Assert.py:104: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "163f61d2e61926ab",
      "name" : "log",
      "source" : "163f61d2e61926ab.txt",
      "type" : "text/plain",
      "size" : 290
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "start_running::0",
    "time" : {
      "start" : 1657094361486,
      "stop" : 1657094362176,
      "duration" : 690
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "AutoDL"
  }, {
    "name" : "story",
    "value" : "微信充值接口"
  }, {
    "name" : "feature",
    "value" : "充值模块"
  }, {
    "name" : "parentSuite",
    "value" : "testCases"
  }, {
    "name" : "suite",
    "value" : "test_RechargeCase"
  }, {
    "name" : "subSuite",
    "value" : "TestRecharge"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "36848-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCases.test_RechargeCase"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expData",
    "value" : "{'code': 'BadRequest', 'msg': '充值金额最低1元'}"
  }, {
    "name" : "inBody",
    "value" : "{'asset': 100}"
  }, {
    "name" : "title",
    "value" : "'充值少于1元'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "eeb81e01b2d2055.json",
  "parameterValues" : [ "{'code': 'BadRequest', 'msg': '充值金额最低1元'}", "{'asset': 100}", "'充值少于1元'" ]
}