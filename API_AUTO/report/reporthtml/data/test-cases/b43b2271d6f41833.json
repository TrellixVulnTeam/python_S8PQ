{
  "uid" : "b43b2271d6f41833",
  "name" : "test_register[inBody2-expData2]",
  "fullName" : "cases.test_RechargeCase.TestRecharge#test_register",
  "historyId" : "dd78879a33d9164f40dc05d7d45b6068",
  "time" : {
    "start" : 1640933321126,
    "stop" : 1640933348610,
    "duration" : 27484
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <cases.test_RechargeCase.TestRecharge object at 0x0000026559CCEF40>\ninBody = {'asset': -1}, expData = {'code': 200, 'msg': '生成微信订单失败, 请稍后重试'}\n\n    @pytest.mark.parametrize('inBody,expData', get_recharge_yaml_data())\n    def test_register(self, inBody, expData):\n>       resData = Recharge().wx_recharge(inData=inBody)\n\n..\\cases\\test_RechargeCase.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\config\\recharge.py:18: in wx_recharge\n    return res.json()\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002655959C8E0>\ns = '<!DOCTYPE html>\\r\\n<html>\\r\\n  <header>\\r\\n    <style>\\r\\n      html, body {\\r\\n        padding: 0;\\r\\n        margin...\\r\\n  <body>\\r\\n    <div class=\"page-502\">\\r\\n      <img src=\"./502.svg\" alt=\"\">\\r\\n    </div>\\r\\n  </body>\\r\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "cases"
  }, {
    "name" : "suite",
    "value" : "test_RechargeCase"
  }, {
    "name" : "subSuite",
    "value" : "TestRecharge"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "27200-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cases.test_RechargeCase"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expData",
    "value" : "{'code': 200, 'msg': '生成微信订单失败, 请稍后重试'}"
  }, {
    "name" : "inBody",
    "value" : "{'asset': -1}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b43b2271d6f41833.json",
  "parameterValues" : [ "{'code': 200, 'msg': '生成微信订单失败, 请稍后重试'}", "{'asset': -1}" ]
}