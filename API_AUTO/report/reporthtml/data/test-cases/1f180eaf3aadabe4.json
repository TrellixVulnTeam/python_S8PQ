{
  "uid" : "1f180eaf3aadabe4",
  "name" : "不传payload",
  "fullName" : "testCases.test_InstancePowerOnCase.TestInstancePowerOn#test_instance_power_on",
  "historyId" : "5f007447fc1f7f087bfd3b21d0ee55a0",
  "time" : {
    "start" : 1652338061550,
    "stop" : 1652338062138,
    "duration" : 588
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'InternalError' == 'Success'\n  - Success\n  + InternalError",
  "statusTrace" : "self = <testCases.test_InstancePowerOnCase.TestInstancePowerOn object at 0x0000017BB8C088E0>\ntitle = '不传payload', inBody = {'instance_uuid': 'f94411a60c-00cc954d'}\nexpData = {'code': 'Success', 'msg': ''}\n\n    @pytest.mark.parametrize('title,inBody,expData',\n                             get_InstancePowerOn_yaml_data(data_path + 'InstancePowerOnCase.yaml'))\n    @allure.story('实例开机接口')\n    @allure.title(\"{title}\")\n    def test_instance_power_on(self, title, inBody, expData):\n        resData = InstancePowerOn().instance_power_on(inData=inBody)\n>       self.define_assert(resData, expData)\n\n..\\testCases\\test_InstancePowerOnCase.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\Assert.py:111: in define_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCases.test_InstancePowerOnCase.TestInstancePowerOn'>\nres = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '机器空闲GPU不足'}\nrespData = {'code': 'Success', 'msg': ''}\n\n    @classmethod  # 使用类名就可以直接调用类方法\n    def define_assert(cls, res, respData):\n        try:\n            if 'code' in respData:\n>               assert res['code'] == respData['code']\nE               AssertionError: assert 'InternalError' == 'Success'\nE                 - Success\nE                 + InternalError\n\n..\\common\\Assert.py:104: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "start_running",
    "time" : {
      "start" : 1652338054861,
      "stop" : 1652338054861,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'InternalError' == 'Success'\n  - Success\n  + InternalError",
    "statusTrace" : "self = <testCases.test_InstancePowerOnCase.TestInstancePowerOn object at 0x0000017BB8C088E0>\ntitle = '不传payload', inBody = {'instance_uuid': 'f94411a60c-00cc954d'}\nexpData = {'code': 'Success', 'msg': ''}\n\n    @pytest.mark.parametrize('title,inBody,expData',\n                             get_InstancePowerOn_yaml_data(data_path + 'InstancePowerOnCase.yaml'))\n    @allure.story('实例开机接口')\n    @allure.title(\"{title}\")\n    def test_instance_power_on(self, title, inBody, expData):\n        resData = InstancePowerOn().instance_power_on(inData=inBody)\n>       self.define_assert(resData, expData)\n\n..\\testCases\\test_InstancePowerOnCase.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\Assert.py:111: in define_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCases.test_InstancePowerOnCase.TestInstancePowerOn'>\nres = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '机器空闲GPU不足'}\nrespData = {'code': 'Success', 'msg': ''}\n\n    @classmethod  # 使用类名就可以直接调用类方法\n    def define_assert(cls, res, respData):\n        try:\n            if 'code' in respData:\n>               assert res['code'] == respData['code']\nE               AssertionError: assert 'InternalError' == 'Success'\nE                 - Success\nE                 + InternalError\n\n..\\common\\Assert.py:104: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1b2ac2b33770175e",
      "name" : "log",
      "source" : "1b2ac2b33770175e.txt",
      "type" : "text/plain",
      "size" : 296
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "start_running::0",
    "time" : {
      "start" : 1652338091227,
      "stop" : 1652338091227,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "实例模块"
  }, {
    "name" : "epic",
    "value" : "AutoDL"
  }, {
    "name" : "story",
    "value" : "实例开机接口"
  }, {
    "name" : "parentSuite",
    "value" : "testCases"
  }, {
    "name" : "suite",
    "value" : "test_InstancePowerOnCase"
  }, {
    "name" : "subSuite",
    "value" : "TestInstancePowerOn"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "29060-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCases.test_InstancePowerOnCase"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expData",
    "value" : "{'code': 'Success', 'msg': ''}"
  }, {
    "name" : "inBody",
    "value" : "{'instance_uuid': 'f94411a60c-00cc954d'}"
  }, {
    "name" : "title",
    "value" : "'不传payload'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1f180eaf3aadabe4.json",
  "parameterValues" : [ "{'code': 'Success', 'msg': ''}", "{'instance_uuid': 'f94411a60c-00cc954d'}", "'不传payload'" ]
}