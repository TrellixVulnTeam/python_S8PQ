{"name": "密码输入7位", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'AlreadyExist' == 'InternalError'\n  - InternalError\n  + AlreadyExist", "trace": "self = <testCases.test_RegisterCase.TestRegister object at 0x000002852F5C9D60>\ntitle = '密码输入7位'\ninBody = {'password': '1234567', 'phone': '18843211234', 'v_code': '666666'}\nexpData = {'code': 'InternalError', 'msg': '验证码无效，请重新获取'}\n\n    @allure.story('注册接口')  # 接口名称\n    # @allure.title('注册用例')  # 用例标题\n    @pytest.mark.parametrize('title,inBody,expData', get_register_yaml_data(data_path + 'RegisterCase.yaml'))\n    @allure.title(\"{title}\")\n    def test_register(self, title, inBody, expData):\n        resData = Register().register(inData=inBody)\n        # yaml_detail = get_yamlCase_detail_data(data_path + '\\\\RegisterCase.yaml')\n        logger.info(f'当前用例名称：{title}')\n        logger.info(f'当前测试用例请求参数：{inBody}')\n        logger.info(f'当前用例预期结果：{expData}')\n        logger.info(f'当前用例实际结果：{resData}\\n')\n        try:\n            self.define_assert(resData, expData)\n            # logger.info(resData)\n        except AssertionError as e:\n            logger.error(f'用例执行失败{e}')\n>           raise e\n\n..\\testCases\\test_RegisterCase.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\testCases\\test_RegisterCase.py:33: in test_register\n    self.define_assert(resData, expData)\n..\\common\\Assert.py:111: in define_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCases.test_RegisterCase.TestRegister'>\nres = {'code': 'AlreadyExist', 'data': None, 'debug_error': '', 'msg': '手机号已注册'}\nrespData = {'code': 'InternalError', 'msg': '验证码无效，请重新获取'}\n\n    @classmethod  # 使用类名就可以直接调用类方法\n    def define_assert(cls, res, respData):\n        try:\n            if 'code' in respData:\n>               assert res['code'] == respData['code']\nE               AssertionError: assert 'AlreadyExist' == 'InternalError'\nE                 - InternalError\nE                 + AlreadyExist\n\n..\\common\\Assert.py:104: AssertionError"}, "attachments": [{"name": "log", "source": "4db7781d-13ee-4b14-a6b5-4b06e2d0cbe5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "title", "value": "'密码输入7位'"}, {"name": "inBody", "value": "{'password': '1234567', 'phone': '18843211234', 'v_code': '666666'}"}, {"name": "expData", "value": "{'code': 'InternalError', 'msg': '验证码无效，请重新获取'}"}], "start": 1647423165539, "stop": 1647423165704, "uuid": "0196edeb-f533-4519-af83-28f8a7a1dc37", "historyId": "7b3fd938e3e20fa2e5973e5d9a5ecd5d", "testCaseId": "e9e06552f9fdd1f1f5eca42736142beb", "fullName": "testCases.test_RegisterCase.TestRegister#test_register", "labels": [{"name": "story", "value": "注册接口"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_RegisterCase"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "DESKTOP-KSOAST3"}, {"name": "thread", "value": "5836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_RegisterCase"}]}