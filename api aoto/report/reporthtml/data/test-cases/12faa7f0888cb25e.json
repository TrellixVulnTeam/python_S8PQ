{
  "uid" : "12faa7f0888cb25e",
  "name" : "test_wrong_num",
  "fullName" : "test_case.Login_case.TestLogin#test_wrong_num",
  "historyId" : "e27ac62871ee8a5835b815a46696149b",
  "time" : {
    "start" : 1636970097157,
    "stop" : 1636970097409,
    "duration" : 252
  },
  "description" : "输入10位手机号",
  "descriptionHtml" : "<p>输入10位手机号</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9347C70>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"输入10位手机号\")\n    def test_wrong_num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"1880105363\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A93E78E0>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "输入10位手机号",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.Login_case.TestLogin object at 0x00000286A9347C70>\n\n    @allure.story(\"参数填写不正确，登录失败\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"输入10位手机号\")\n    def test_wrong_num(self):\n        def_name = sys._getframe().f_code.co_name\n        test_assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s：\\n\", def_name)\n        cap_id, cap_val = get_captcha()\n        base_url = config.adss.server_ip()\n        url = base_url + 'login'\n        headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n        r = requests.post(url=url, json={\"captcha_id\": cap_id, \"captcha_value\": cap_val, \"password\": \"123456Aa\",\n                                         \"phone\": \"1880105363\"}, headers=headers)\n        print(r.json())\n        code1 = r.status_code\n        # 获取接口返回信息\n        str_response = r.content.decode()\n        # 读取json\n        json_response = dict_style(str_response)\n        # 校验状态码是否是200\n        test_assert.assert_code(code1, 200)\n        # 校验返回信息是否与预期信息一致\n>       test_assert.assert_body(json_response, 'msg', '手机号或密码错误，请重试')\n\n..\\test_case\\Login_case.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.Assert.Assertions object at 0x00000286A93E78E0>\nbody = {'code': 'InternalError', 'data': None, 'debug_error': '', 'msg': '帐号未注册'}\nbody_msg = 'msg', expected_msg = '手机号或密码错误，请重试'\n\n    def assert_body(self, body, body_msg, expected_msg):\n        \"\"\"\n        验证response body任意属性的值\n        :param body:\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            msg = body[body_msg]\n>           assert msg == expected_msg\nE           AssertionError\n\n..\\common\\Assert.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "983658a3baecc9a3",
      "name" : "log",
      "source" : "983658a3baecc9a3.txt",
      "type" : "text/plain",
      "size" : 330
    }, {
      "uid" : "3c7f0d4849a71c6",
      "name" : "stdout",
      "source" : "3c7f0d4849a71c6.txt",
      "type" : "text/plain",
      "size" : 86
    }, {
      "uid" : "bbe9b66b2236d9e2",
      "name" : "stderr",
      "source" : "bbe9b66b2236d9e2.txt",
      "type" : "text/plain",
      "size" : 469
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "参数填写不正确，登录失败"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "登录模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "Login_case"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KSOAST3"
  }, {
    "name" : "thread",
    "value" : "20580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.Login_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ {
      "uid" : "9e150fef70305f97",
      "status" : "passed",
      "time" : {
        "start" : 1632474695241,
        "stop" : 1632474695438,
        "duration" : 197
      }
    }, {
      "uid" : "bce39eecc5582ad5",
      "status" : "passed",
      "time" : {
        "start" : 1632473705406,
        "stop" : 1632473705619,
        "duration" : 213
      }
    }, {
      "uid" : "174bef207f147417",
      "status" : "passed",
      "time" : {
        "start" : 1632473544001,
        "stop" : 1632473544210,
        "duration" : 209
      }
    }, {
      "uid" : "2731028ba921b8b3",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1632469964077,
        "stop" : 1632469964272,
        "duration" : 195
      }
    }, {
      "uid" : "40f3d12bd4c39ea8",
      "status" : "passed",
      "time" : {
        "start" : 1632469738994,
        "stop" : 1632469739209,
        "duration" : 215
      }
    }, {
      "uid" : "50fe761ba7a241ba",
      "status" : "passed",
      "time" : {
        "start" : 1632469658665,
        "stop" : 1632469658856,
        "duration" : 191
      }
    }, {
      "uid" : "f8f998f7737bcda6",
      "status" : "passed",
      "time" : {
        "start" : 1632469574039,
        "stop" : 1632469574227,
        "duration" : 188
      }
    }, {
      "uid" : "3f508158081d9815",
      "status" : "passed",
      "time" : {
        "start" : 1632469454776,
        "stop" : 1632469455022,
        "duration" : 246
      }
    }, {
      "uid" : "5883c70de56a0180",
      "status" : "passed",
      "time" : {
        "start" : 1632469377284,
        "stop" : 1632469377490,
        "duration" : 206
      }
    }, {
      "uid" : "a03b476da7277070",
      "status" : "passed",
      "time" : {
        "start" : 1632468359944,
        "stop" : 1632468360169,
        "duration" : 225
      }
    }, {
      "uid" : "cef8069333587bc0",
      "status" : "passed",
      "time" : {
        "start" : 1632455637898,
        "stop" : 1632455638117,
        "duration" : 219
      }
    }, {
      "uid" : "bbff69ddb019f1ae",
      "status" : "passed",
      "time" : {
        "start" : 1632454819445,
        "stop" : 1632454819679,
        "duration" : 234
      }
    }, {
      "uid" : "b3993ef34e3260d4",
      "status" : "passed",
      "time" : {
        "start" : 1632453997741,
        "stop" : 1632453997956,
        "duration" : 215
      }
    }, {
      "uid" : "55bc719fcb2d01bb",
      "status" : "passed",
      "time" : {
        "start" : 1632453126675,
        "stop" : 1632453126871,
        "duration" : 196
      }
    }, {
      "uid" : "7d84e63389ae57a2",
      "status" : "passed",
      "time" : {
        "start" : 1632453016386,
        "stop" : 1632453016577,
        "duration" : 191
      }
    }, {
      "uid" : "5a6180fd6fcaeb25",
      "status" : "passed",
      "time" : {
        "start" : 1632387035145,
        "stop" : 1632387035329,
        "duration" : 184
      }
    }, {
      "uid" : "41652f0277e368bf",
      "status" : "passed",
      "time" : {
        "start" : 1631518363974,
        "stop" : 1631518364166,
        "duration" : 192
      }
    }, {
      "uid" : "f4885bd5bb683624",
      "status" : "passed",
      "time" : {
        "start" : 1631518042188,
        "stop" : 1631518042341,
        "duration" : 153
      }
    }, {
      "uid" : "7a2cda5470a60c94",
      "status" : "passed",
      "time" : {
        "start" : 1631503269128,
        "stop" : 1631503269258,
        "duration" : 130
      }
    }, {
      "uid" : "a78a1e5d83e3cc6d",
      "status" : "passed",
      "time" : {
        "start" : 1631502914883,
        "stop" : 1631502914998,
        "duration" : 115
      }
    }, {
      "uid" : "74012c0d7693e74f",
      "status" : "passed",
      "time" : {
        "start" : 1631502409650,
        "stop" : 1631502409762,
        "duration" : 112
      }
    }, {
      "uid" : "c396b10335a98c1e",
      "status" : "passed",
      "time" : {
        "start" : 1631069452346,
        "stop" : 1631069453496,
        "duration" : 1150
      }
    }, {
      "uid" : "b86c0772a90d54c3",
      "status" : "passed",
      "time" : {
        "start" : 1631069406820,
        "stop" : 1631069406912,
        "duration" : 92
      }
    }, {
      "uid" : "a1f13a8858743afe",
      "status" : "passed",
      "time" : {
        "start" : 1629283726326,
        "stop" : 1629283726435,
        "duration" : 109
      }
    }, {
      "uid" : "bbe8197a360f772b",
      "status" : "passed",
      "time" : {
        "start" : 1629186775350,
        "stop" : 1629186775462,
        "duration" : 112
      }
    }, {
      "uid" : "99fb3c0f07bf67c4",
      "status" : "passed",
      "time" : {
        "start" : 1629186621805,
        "stop" : 1629186621932,
        "duration" : 127
      }
    }, {
      "uid" : "d63ef9d99abf636b",
      "status" : "passed",
      "time" : {
        "start" : 1629185611250,
        "stop" : 1629185611397,
        "duration" : 147
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "12faa7f0888cb25e.json",
  "parameterValues" : [ ]
}